{"version":3,"sources":["constants/messageHistory.js","components/TestArea.js","container/App.js","serviceWorker.js","index.js"],"names":["messageHistory","type","author","data","text","emoji","TestArea","_this","this","props","recognition","lang","react_default","a","createElement","className","onSubmit","e","preventDefault","onMessage","textArea","value","ref","id","placeholder","transcript","resetTranscript","readOnly","onClick","Component","SpeechRecognition","autoStart","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","messageList","newMessagesCount","isOpen","message","setState","concat","toConsumableArray","fileList","objectURL","window","URL","createObjectURL","url","fileName","name","length","src_components_TestArea","_sendMessage","bind","es","agentProfile","teamName","imageUrl","onMessageWasSent","_onMessageWasSent","handleClick","_handleClick","showEmoji","Boolean","location","hostname","match","ReactDOM","render","src_container_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c268203f.chunk.js","sourcesContent":["export default [\n  {type: 'text', author: \"them\", data: { text: \"FIRST DATA!\"} },\n  {type: 'emoji', author: \"me\", data: { emoji: \"üòã\"} },\n]\n","import React, { Component } from 'react'\nimport SpeechRecognition from \"react-speech-recognition\"\nimport './TestArea.css'\n\nconst options = {\n  autoStart: true,\n}\n\nclass TestArea extends Component {\n  render () {\n    this.props.recognition.lang = 'ja-JP'\n    return (\n      <div className=\"wrapper\">\n        <div>\n          <h3>TEXT INPUT AREA</h3>\n          <form className=\"form-inline\" onSubmit={(e)=> {\n              e.preventDefault();\n              this.props.onMessage(this.textArea.value);\n              this.textArea.value = '';\n            }}>\n            <div className=\"form-group mx-sm-3 mb-2\">\n              <label className=\"sr-only\">TEXT</label>\n              <input type=\"text\"\n                ref={(e) => { this.textArea = e; }}\n                className=\"form-control\" id=\"text\" placeholder=\"Write a test message....\" />\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary mb-2\">SEND</button>\n          </form>\n        </div>\n        <div className=\"second-div\">\n          <h3>AUDIO INPUT AREA</h3>\n          <form className=\"form-inline\" onSubmit={(e)=> {\n              e.preventDefault();\n              this.props.onMessage(this.props.transcript);\n              this.props.resetTranscript();\n            }}>\n            <div className=\"form-group mx-sm-3 mb-2\">\n              <label className=\"sr-only\">TEXT</label>\n              <input type=\"text\"\n                value={this.props.transcript}\n                readOnly\n                className=\"form-control\" id=\"text\" placeholder=\"Speak a test message....\" />\n            </div>\n            <button className=\"btn btn-warning mb-1\" onClick={this.props.resetTranscript}>Reset</button>\n            <button type=\"submit\" className=\"btn btn-primary mb-1 left-btn\">SEND</button>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SpeechRecognition(options)(TestArea)\n","import React, {Component} from 'react'\nimport {Launcher} from 'react-chat-window'\nimport messageHistory from '../constants/messageHistory'\nimport TestArea from '../components/TestArea'\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messageList: messageHistory,\n      newMessagesCount: 0,\n      isOpen: true,\n    };\n  }\n\n  _onMessageWasSent(message) {\n    this.setState({\n      messageList: [...this.state.messageList, message]\n    })\n  }\n\n  _onFilesSelected(fileList) {\n    const objectURL = window.URL.createObjectURL(fileList[0]);\n    this.setState({\n      messageList: [...this.state.messageList, {\n        type: 'file', author: \"me\",\n        data: {\n          url: objectURL,\n          fileName: fileList[0].name\n        }\n      }]\n    })\n  }\n\n  _sendMessage(text) {\n    if (text.length > 0) {\n      const newMessagesCount = this.state.isOpen ? this.state.newMessagesCount : this.state.newMessagesCount + 1\n      this.setState({\n        newMessagesCount: newMessagesCount,\n        messageList: [...this.state.messageList, {\n          author: 'them',\n          type: 'text',\n          data: { text }\n        },\n        {\n          author: 'me',\n          type: 'text',\n          data: { text: `${this.state.newMessagesCount + 1}„ÅÆÁ≠î„Åà` }\n        }]\n      })\n    }\n  }\n\n  _handleClick() {\n    this.setState({\n      isOpen: !this.state.isOpen,\n      newMessagesCount: 0\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"jumbotron vertical-center\">\n          <TestArea\n            onMessage={this._sendMessage.bind(this)}\n          />\n        </div>\n\n        <Launcher\n          agentProfile={{\n            teamName: 'react-chat-window',\n            imageUrl: 'https://a.slack-edge.com/66f9/img/avatars-teams/ava_0001-34.png'\n          }}\n          onMessageWasSent={this._onMessageWasSent.bind(this)}\n          // onFilesSelected={this._onFilesSelected.bind(this)}\n          messageList={this.state.messageList}\n          newMessagesCount={this.state.newMessagesCount}\n          handleClick={this._handleClick.bind(this)}\n          isOpen={this.state.isOpen}\n          showEmoji\n        />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}